
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "list.h"


node_t *getNode(elem value) {
  node_t *node = (node_t *) malloc(sizeof(node_t));
  if (!node) exit(EXIT_FAILURE);
  node->value = value;
  node->next = NULL;
  return node;
}

list_t *list_alloc() {
  list_t *list = (list_t *) malloc(sizeof(list_t));
  if (!list) exit(EXIT_FAILURE);
  list->head = NULL;
  return list;
}

void list_free(list_t *l) {
  if (!l) return;
  node_t *cur = l->head;
  node_t *next;
  while (cur) {
    next = cur->next;
    free(cur);
    cur = next;
  }
  free(l);
}

void list_print(list_t *l) {
  if (!l) return;
  node_t *cur = l->head;
  printf("MYLIST:\n");
  while (cur) {
    printf("%d\n", cur->value);
    cur = cur->next;
  }
}

char *listToString(list_t *l) {
  if (!l) return NULL;
  size_t buf_size = 128;
  char *buf = malloc(buf_size);
  if (!buf) return NULL;

  char *p = buf;
  size_t remaining = buf_size;
  node_t *cur = l->head;

  while (cur) {
    int written = snprintf(p, remaining, "%d->", cur->value);
    if (written >= remaining) {
      size_t used = buf_size - remaining;
      buf_size *= 2;
      char *new_buf = realloc(buf, buf_size);
      if (!new_buf) { free(buf); return NULL; }
      buf = new_buf;
      p = buf + used;
      remaining = buf_size - used;
      written = snprintf(p, remaining, "%d->", cur->value);
    }
    p += written;
    remaining -= written;
    cur = cur->next;
  }

  if (remaining < 5) { // ensure space for "NULL"
    size_t used = buf_size - remaining;
    buf_size += 5;
    char *new_buf = realloc(buf, buf_size);
    if (!new_buf) { free(buf); return NULL; }
    buf = new_buf;
    p = buf + used;
  }

  strcpy(p, "NULL");
  return buf;
}


int list_length(list_t *l) {
  if (!l) return 0;
  int count = 0;
  node_t *cur = l->head;
  while (cur) { count++; cur = cur->next; }
  return count;
}

void list_add_to_back(list_t *l, elem value) {
  if (!l) return;
  node_t *node = getNode(value);
  if (!l->head) { l->head = node; return; }

  node_t *cur = l->head;
  while (cur->next) cur = cur->next;
  cur->next = node;
}


void list_add_to_front(list_t *l, elem value) {
  if (!l) return;
  node_t *node = getNode(value);
  node->next = l->head;
  l->head = node;
}


void list_add_at_index(list_t *l, elem value, int index) {
  if (!l) return;
  int len = list_length(l);
  if (index < 1 || index > len + 1) return; 

  node_t *node = getNode(value);

  if (index == 1) { 
    node->next = l->head;
    l->head = node;
    return;
  }

  node_t *prev = l->head;
  int i;
  for (i = 1; i < index - 1; i++) prev = prev->next;
  node->next = prev->next;
  prev->next = node;
}


elem list_remove_from_back(list_t *l) {
  if (!l || !l->head) return -1;

  node_t *cur = l->head;
  node_t *prev = NULL;

  while (cur->next) { prev = cur; cur = cur->next; }

  if (!prev) { 
    elem val = cur->value;
    free(cur);
    l->head = NULL;
    return val;
  }

  prev->next = NULL;
  elem val = cur->value;
  free(cur);
  return val;
}


elem list_remove_from_front(list_t *l) {
  if (!l || !l->head) return -1;
  node_t *cur = l->head;
  elem val = cur->value;
  l->head = cur->next;
  free(cur);
  return val;
}


elem list_remove_at_index(list_t *l, int index) {
  if (!l || !l->head) return -1;
  int len = list_length(l);
  if (index < 1 || index > len) return -1;

  if (index == 1) return list_remove_from_front(l);
  if (index == len) return list_remove_from_back(l);

  node_t *prev = l->head;
  int i;
  for (i = 1; i < index - 1; i++) prev = prev->next;

  node_t *cur = prev->next;
  prev->next = cur->next;
  elem val = cur->value;
  free(cur);
  return val;
}


bool list_is_in(list_t *l, elem value) {
  if (!l) return false;
  node_t *cur = l->head;
  while (cur) { if (cur->value == value) return true; cur = cur->next; }
  return false;
}


elem list_get_elem_at(list_t *l, int index) {
  if (!l || !l->head) return -1;
  int len = list_length(l);
  if (index < 1 || index > len) return -1;

  node_t *cur = l->head;
  int i;
  for (i = 1; i < index; i++) cur = cur->next;
  return cur->value;
}


int list_get_index_of(list_t *l, elem value) {
  if (!l || !l->head) return -1;
  node_t *cur = l->head;
  int index = 1;
  while (cur) {
    if (cur->value == value) return index;
    cur = cur->next;
    index++;
  }
  return -1;
}
